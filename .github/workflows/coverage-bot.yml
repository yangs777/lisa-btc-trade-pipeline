name: 🤖 Self-Healing Coverage Bot

on:
  schedule:
    # Daily at 3:30 AM UTC (12:30 PM KST)
    - cron: '30 3 * * *'
  workflow_dispatch:
    inputs:
      target_coverage:
        description: 'Target coverage percentage'
        required: false
        default: '60'
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  coverage-bot:
    name: Auto Coverage Improvement
    runs-on: ubuntu-latest
    env:
      GH_PAT_COVERAGE_BOT: ${{ secrets.GH_PAT_COVERAGE_BOT }}
      GDRIVE_FILE_ID: ${{ secrets.GDRIVE_FILE_ID }}
      GDRIVE_SHA256: ${{ secrets.GDRIVE_SHA256 }}
      COV_FAIL_UNDER: 35
      COV_TARGET: ${{ secrets.COV_TARGET || '60' }}
      COV_GAIN_MIN: ${{ secrets.COV_GAIN_MIN || '0.5' }}
      PYTHONPATH: ${{ github.workspace }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GH_PAT_COVERAGE_BOT || github.token }}
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install gdown pytest-timeout
    
    - name: 📊 Check current coverage
      id: check_coverage
      run: |
        # Run light tests first to get baseline
        pytest -m "not heavy" --cov=src --cov-branch --cov-report=xml --cov-report=term -q || true
        
        # Extract coverage percentage
        if [ -f coverage.xml ]; then
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; print(float(ET.parse('coverage.xml').getroot().get('line-rate', 0)) * 100)")
          echo "current_coverage=${COVERAGE}" >> $GITHUB_OUTPUT
          echo "📊 Current coverage: ${COVERAGE}%"
        else
          echo "current_coverage=0" >> $GITHUB_OUTPUT
          echo "❌ No coverage data found"
        fi
    
    - name: 📊 Cache test data
      uses: actions/cache@v4
      with:
        path: tests/_data
        key: gdrive-${{ hashFiles('scripts/fetch_gdrive_data.sh') }}-${{ secrets.GDRIVE_SHA256 }}
        restore-keys: |
          gdrive-${{ hashFiles('scripts/fetch_gdrive_data.sh') }}-
          gdrive-
    
    - name: 💾 Fetch test data from Google Drive
      if: env.GDRIVE_FILE_ID != ''
      run: |
        bash scripts/fetch_gdrive_data.sh || echo "⚠️ Google Drive data fetch failed (non-critical)"
    
    - name: 🔧 Configure git
      run: |
        git config user.name "coverage-bot[bot]"
        git config user.email "coverage-bot[bot]@users.noreply.github.com"
    
    - name: 🤖 Run coverage auto-fix
      env:
        GH_TOKEN: ${{ secrets.GH_PAT_COVERAGE_BOT || github.token }}
      run: |
        python scripts/coverage_autofix.py
    
    - name: 📈 Report results
      if: always()
      run: |
        echo "### 🤖 Coverage Bot Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f coverage.xml ]; then
          FINAL_COV=$(python -c "import xml.etree.ElementTree as ET; print(float(ET.parse('coverage.xml').getroot().get('line-rate', 0)) * 100)")
          echo "- **Final Coverage**: ${FINAL_COV}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Initial Coverage**: ${{ steps.check_coverage.outputs.current_coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: ${{ inputs.target_coverage || '60' }}%" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No coverage data available" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Bot run completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

  # Optional: Auto-merge PRs if tests pass
  auto-merge:
    name: Auto-merge Coverage PRs
    runs-on: ubuntu-latest
    needs: coverage-bot
    if: github.event_name == 'schedule'
    
    steps:
    - name: 🔍 Find coverage bot PRs
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GH_PAT_COVERAGE_BOT || github.token }}
        script: |
          const prs = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            label: 'auto-coverage'
          });
          
          for (const pr of prs.data) {
            // Check if PR checks passed
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            const allPassed = checks.data.check_runs.every(
              check => check.status === 'completed' && check.conclusion === 'success'
            );
            
            if (allPassed && pr.mergeable) {
              console.log(`✅ Auto-merging PR #${pr.number}`);
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: 'squash'
              });
            }
          }