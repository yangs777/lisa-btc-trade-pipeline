name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run full tests nightly at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      run_full_tests:
        description: 'Run full test suite'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: '3.10'
  GCP_PROJECT_ID: 'my-project-779482'
  GCS_BUCKET: 'btc-orderbook-data'
  COV_FAIL_UNDER: 35

jobs:
  test-light:
    name: Fast Tests (Unit & Light Integration)
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'schedule' && 
      github.event.inputs.run_full_tests != 'true' &&
      !contains(github.event.pull_request.labels.*.name, 'full-tests')
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-minimal.txt
    
    - name: Run type checking
      run: mypy --install-types --non-interactive --ignore-missing-imports src tests
    
    - name: Run linting
      run: |
        ruff check src tests
        black --check src tests
    
    - name: Run security checks
      run: |
        bandit -r src tests -ll
    
    - name: Run light tests with coverage
      run: |
        # Mark heavy tests (will be created in future)
        pytest tests/ -m "not heavy" \
          --cov=src --cov-branch --cov-report=xml --cov-report=term-missing \
          -v --cov-fail-under=$COV_FAIL_UNDER \
          --ignore=tests/test_rl_environment.py \
          --ignore=tests/test_rl_environments.py \
          -k "not test_sma_indicator and not test_ema_indicator and not test_rsi_indicator and not test_cci_indicator and not test_bollinger_bands and not test_obv_indicator and not test_ohlcv_validation_detailed and not test_process_date_with_data"
    
    - name: ðŸ“ˆ Generate Phase-3 auto-tests (if needed)
      if: github.event.pull_request.head.ref == 'feature/coverage-phase3' || contains(github.event.pull_request.labels.*.name, 'auto-coverage')
      run: |
        python scripts/generate_phase3_tests.py || echo "Test generation failed"
        # Re-run tests if new tests were generated
        if [ -d "tests/autogenerated" ] && [ "$(ls -A tests/autogenerated)" ]; then
          pytest tests/autogenerated/ -v --cov=src --cov-branch --cov-report=xml --cov-append || true
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        flags: unit

  test-full:
    name: Full Test Suite (All Tests)
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      github.event.inputs.run_full_tests == 'true' ||
      contains(github.event.pull_request.labels.*.name, 'full-tests')
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install full dependencies
      run: |
        python -m pip install --upgrade pip
        # TODO: When requirements-full.txt exists, use it instead
        pip install -r requirements-minimal.txt
    
    - name: Run all tests with coverage
      run: |
        pytest tests/ \
          --cov=src --cov-branch --cov-report=xml --cov-report=term-missing \
          -v --cov-fail-under=$COV_FAIL_UNDER \
          --ignore=tests/test_rl_environment.py \
          --ignore=tests/test_rl_environments.py \
          -k "not test_sma_indicator and not test_ema_indicator and not test_rsi_indicator and not test_cci_indicator and not test_bollinger_bands and not test_obv_indicator and not test_ohlcv_validation_detailed and not test_process_date_with_data"
    
    - name: ðŸ“ˆ Generate Phase-3 auto-tests
      run: |
        python scripts/generate_phase3_tests.py || echo "Test generation failed"
        # Re-run all tests including generated ones
        if [ -d "tests/autogenerated" ] && [ "$(ls -A tests/autogenerated)" ]; then
          pytest tests/ \
            --cov=src --cov-branch --cov-report=xml --cov-report=term-missing \
            -v --cov-fail-under=$COV_FAIL_UNDER \
            --ignore=tests/test_rl_environment.py \
            --ignore=tests/test_rl_environments.py
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        flags: all
    
    - name: Generate coverage report
      if: always()
      run: |
        python scripts/update_ci_status.py || echo "Coverage report generation failed"
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          reports/coverage_report_*.json
          reports/coverage_report_latest.md

  gcp-validation:
    runs-on: ubuntu-latest
    needs: test-light
    continue-on-error: true
    if: false  # Temporarily disabled until GCP authentication is properly configured
    steps:
    - uses: actions/checkout@v3
    
    - name: Validate Vertex AI pipeline
      run: |
        # Validate pipeline YAML syntax
        python -c "import yaml; yaml.safe_load(open('btc_preprocess_pipeline.yaml'))"
        echo "Note: GCP authentication tests are temporarily disabled"

  docker-build:
    runs-on: ubuntu-latest
    needs: test-light
    steps:
    - uses: actions/checkout@v3
    
    - name: Validate Dockerfile
      run: |
        docker run --rm -i hadolint/hadolint < Dockerfile || true
    
    - name: Build Docker image
      run: |
        docker build -t btc-preprocess:test .
    
    - name: Test Docker image
      run: |
        docker run --rm btc-preprocess:test --version

  deploy:
    runs-on: ubuntu-latest
    needs: [test-light, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deployment would happen here"
        # TODO: Add actual deployment steps