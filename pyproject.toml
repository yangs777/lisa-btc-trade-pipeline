[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lisa-btc-trade-pipeline"
version = "0.4.0"
description = "BTC/USDT Ï„-SAC Trading System - Advanced reinforcement learning trading system"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Lisa AI Team", email = "team@lisa-ai.com"},
]
keywords = ["bitcoin", "trading", "reinforcement-learning", "tau-sac", "cryptocurrency"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
]

[project.urls]
Homepage = "https://github.com/unsuperior-ai/lisa-btc-trade-pipeline"
Documentation = "https://github.com/unsuperior-ai/lisa-btc-trade-pipeline/wiki"
Repository = "https://github.com/unsuperior-ai/lisa-btc-trade-pipeline"
Issues = "https://github.com/unsuperior-ai/lisa-btc-trade-pipeline/issues"

[project.scripts]
lisa-btc = "src.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "ccxt.*",
    "ta.*",
    "pandas_ta.*",
    "binance.*",
    "gymnasium.*",
    "stable_baselines3.*",
    "shap.*",
    "numba.*",
    "prometheus_client.*",
    "grafana_api.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
# Relax type checking for test files
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_calls = false
warn_return_any = false

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "S",   # flake8-bandit
    "T",   # flake8-debugger
    "W",   # pycodestyle warnings
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "S104",  # possible binding to all interfaces
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
markers = [
    "asyncio: mark test as async",
    "e2e: mark test as end-to-end test",
    "integration: mark test as integration test",
    "heavy: mark test as heavy/slow test",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/configs/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false