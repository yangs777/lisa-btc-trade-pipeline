#!/usr/bin/env python3
"""
Self-healing coverage bot that automatically creates PRs to improve test coverage.

1) Reads coverage.xml and calculates line rate
2) If below target (60%):
   - Creates new branch (feature/auto-coverage-YYYYMMDD)
   - Runs scripts/generate_phase3_tests.py
   - Runs pytest with coverage
   - If coverage improves by â‰¥0.5%:
     Â· Updates README/reports
     Â· Commits and pushes
     Â· Creates GitHub PR
3) If no meaningful change, exits quietly
"""
from __future__ import annotations
import os
import subprocess
import sys
import time
import json
import shlex
import pathlib
import xml.etree.ElementTree as ET
from datetime import datetime

PROJECT = pathlib.Path(__file__).resolve().parent.parent
TARGET = 60.0  # Phase 3 target
BRANCH = f"feature/auto-coverage-{datetime.utcnow():%Y%m%d}"


def shell(cmd: str, check=True, capture=False):
    """Execute shell command."""
    result = subprocess.run(
        shlex.split(cmd),
        cwd=PROJECT,
        check=check,
        text=True,
        capture_output=capture
    )
    return result.stdout.strip() if capture else None


def current_coverage() -> float:
    """Get current coverage percentage from coverage.xml."""
    cov_xml = PROJECT / "coverage.xml"
    if not cov_xml.exists():
        return 0.0
    tree = ET.parse(cov_xml)
    return float(tree.getroot().get("line-rate", 0)) * 100


def main():
    """Main bot logic."""
    # Check current coverage
    base_cov = current_coverage()
    print(f"[bot] Current coverage: {base_cov:.2f}%")
    
    if base_cov >= TARGET:
        print(f"[bot] Target {TARGET}% already met, nothing to do ðŸŸ¢")
        return
    
    print(f"[bot] Coverage below target {TARGET}%, starting auto-fix...")
    
    # Create new branch
    print(f"[bot] Creating branch: {BRANCH}")
    shell(f"git checkout -B {BRANCH}")
    
    # Generate auto tests
    print("[bot] Generating stub tests...")
    shell("python scripts/generate_phase3_tests.py")
    
    # Run tests and measure new coverage
    print("[bot] Running tests with new stubs...")
    shell("pytest -m 'not heavy' --cov=src --cov-report=xml --cov-report=term-missing -q", check=False)
    
    new_cov = current_coverage()
    print(f"[bot] New coverage: {new_cov:.2f}%")
    
    # Check if improvement is meaningful
    improvement = new_cov - base_cov
    if improvement < 0.5:
        print(f"[bot] Coverage gain too small ({improvement:.2f}%), aborting âšª")
        shell("git checkout -")  # Return to previous branch
        return
    
    print(f"[bot] Coverage improved by {improvement:.2f}% âœ…")
    
    # Update README and reports
    print("[bot] Updating README and reports...")
    shell("python scripts/update_ci_status.py")
    
    # Stage changes
    shell("git add tests/autogenerated README.md reports coverage.xml coverage.json -A")
    
    # Commit
    commit_msg = f"chore(bot): auto-gen tests â€“ coverage {base_cov:.2f}%â†’{new_cov:.2f}%"
    shell(f'git commit -m "{commit_msg}"')
    
    # Push branch
    print(f"[bot] Pushing branch {BRANCH}...")
    token = os.environ.get("GH_PAT_COVERAGE_BOT", "")
    if token:
        # Use token for authentication
        repo_url = shell("git config --get remote.origin.url", capture=True)
        if "github.com" in repo_url:
            repo = repo_url.split(":")[-1].replace(".git", "")
            shell(f"git push https://{token}@github.com/{repo}.git {BRANCH} --force")
    else:
        # Fallback to regular push
        shell(f"git push origin {BRANCH} --force")
    
    # Create PR
    print("[bot] Creating pull request...")
    pr_body = f"""## ðŸ¤– Automated Coverage Boost

**Current**: {base_cov:.2f}% â†’ **New**: {new_cov:.2f}% (ðŸ”º +{improvement:.2f}%)

### What this PR does:
- Auto-generated stub tests using `scripts/generate_phase3_tests.py`
- Added tests for modules with <25% coverage
- Improves overall test coverage towards {TARGET}% target

### Files changed:
- New test files in `tests/autogenerated/`
- Updated coverage reports and README badges

### Next steps:
1. Review generated tests
2. Merge to keep coverage trending upward
3. Consider enhancing stub tests with real logic

---
*This PR was automatically created by the coverage bot to maintain project health.*"""
    
    # Create PR using gh CLI
    pr_cmd = f"""gh pr create \
        --title "ðŸ¤– Auto coverage boost: {new_cov:.2f}%" \
        --body {shlex.quote(pr_body)} \
        --label "auto-coverage,tests" \
        --head {BRANCH}"""
    
    try:
        shell(pr_cmd, check=False)
        print("[bot] Pull request created successfully âœ…")
    except Exception as e:
        print(f"[bot] Failed to create PR (may already exist): {e}")
    
    print(f"[bot] Done! Coverage improved from {base_cov:.2f}% to {new_cov:.2f}%")


if __name__ == "__main__":
    main()